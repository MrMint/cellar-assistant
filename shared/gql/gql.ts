/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query GetCredential($id: String!) {\n    admin_credentials_by_pk(id: $id) {\n      id\n      credentials\n    }\n  }\n": types.GetCredentialDocument,
    "\n  query GetFile($id: uuid!) {\n    file(id: $id) {\n      id\n      bucket {\n        id\n      }\n      mimeType\n      size\n    }\n  }\n": types.GetFileDocument,
    "\n  mutation AddTextExtractionResults($analysis: image_analysis_insert_input!) {\n    insert_image_analysis_one(object: $analysis) {\n      id\n    }\n  }\n": types.AddTextExtractionResultsDocument,
    "\n  mutation InsertFriends(\n    $friends: [friends_insert_input!]!\n    $requestId: uuid!\n  ) {\n    insert_friends(objects: $friends) {\n      affected_rows\n    }\n\n    delete_friend_requests_by_pk(id: $requestId) {\n      id\n    }\n  }\n": types.InsertFriendsDocument,
    "\n  mutation InsertVector($vector: item_vectors_insert_input!) {\n    insert_item_vectors_one(object: $vector) {\n      id\n    }\n  }\n": types.InsertVectorDocument,
    "\n  mutation DeleteVectors($where: item_vectors_bool_exp!) {\n    delete_item_vectors(where: $where) {\n      affected_rows\n    }\n  }\n": types.DeleteVectorsDocument,
    "\n  mutation UpdateItemImage($itemId: uuid!, $item: item_image_set_input!) {\n    update_item_image_by_pk(pk_columns: { id: $itemId }, _set: $item) {\n      id\n    }\n  }\n": types.UpdateItemImageDocument,
    "\n  mutation AddItemOnboarding($onboarding: item_onboardings_insert_input!) {\n    insert_item_onboardings_one(object: $onboarding) {\n      id\n    }\n  }\n": types.AddItemOnboardingDocument,
    "\n  mutation InsertItemImage($item: item_image_insert_input!) {\n    insert_item_image_one(object: $item) {\n      id\n    }\n  }\n": types.InsertItemImageDocument,
    "\n  mutation AddItemImage($input: item_image_upload_input!) {\n    item_image_upload(input: $input) {\n      id\n    }\n  }\n": types.AddItemImageDocument,
    "\n  mutation AddCellarItem($item: cellar_items_insert_input!) {\n    insert_cellar_items_one(object: $item) {\n      id\n      cellar_id\n    }\n  }\n": types.AddCellarItemDocument,
    "\n  mutation AddBeer($beer: beers_insert_input!) {\n    insert_beers_one(object: $beer) {\n      id\n    }\n  }\n": types.AddBeerDocument,
    "\n  mutation UpdateBeer($beerId: uuid!, $beer: beers_set_input!) {\n    update_beers_by_pk(pk_columns: { id: $beerId }, _set: $beer) {\n      id\n    }\n  }\n": types.UpdateBeerDocument,
    "\n  mutation AddCoffee($coffee: coffees_insert_input!) {\n    insert_coffees_one(object: $coffee) {\n      id\n    }\n  }\n": types.AddCoffeeDocument,
    "\n  mutation UpdateCoffee($coffeeId: uuid!, $coffee: coffees_set_input!) {\n    update_coffees_by_pk(pk_columns: { id: $coffeeId }, _set: $coffee) {\n      id\n    }\n  }\n": types.UpdateCoffeeDocument,
    "\n  mutation UpdateCellarItem($id: uuid!, $item: cellar_items_set_input!) {\n    update_cellar_items_by_pk(pk_columns: { id: $id }, _set: $item) {\n      id\n    }\n  }\n": types.UpdateCellarItemDocument,
    "\n  mutation AddWine($wine: wines_insert_input!) {\n    insert_wines_one(object: $wine) {\n      id\n    }\n  }\n": types.AddWineDocument,
    "\n  mutation UpdateWine($wineId: uuid!, $wine: wines_set_input!) {\n    update_wines_by_pk(pk_columns: { id: $wineId }, _set: $wine) {\n      id\n    }\n  }\n": types.UpdateWineDocument,
    "\n  mutation AddSpirit($spirit: spirits_insert_input!) {\n    insert_spirits_one(object: $spirit) {\n      id\n    }\n  }\n": types.AddSpiritDocument,
    "\n  mutation UpdateSpirit($spiritId: uuid!, $spirit: spirits_set_input!) {\n    update_spirits_by_pk(pk_columns: { id: $spiritId }, _set: $spirit) {\n      id\n    }\n  }\n": types.UpdateSpiritDocument,
    "\n  mutation AddItemReview($review: item_reviews_insert_input!) {\n    insert_item_reviews_one(object: $review) {\n      id\n      beer {\n        id\n      }\n      wine {\n        id\n      }\n      spirit {\n        id\n      }\n    }\n  }\n": types.AddItemReviewDocument,
    "\n  mutation AddCheckIn($checkIn: check_ins_insert_input!) {\n    insert_check_ins_one(object: $checkIn) {\n      id\n      cellar_item {\n        id\n      }\n    }\n  }\n": types.AddCheckInDocument,
    "\n  mutation AddCheckIns($checkIns: [check_ins_insert_input!]!) {\n    insert_check_ins(objects: $checkIns) {\n      affected_rows\n      returning {\n        id\n        cellar_item {\n          id\n        }\n      }\n    }\n  }\n": types.AddCheckInsDocument,
    "\n  query GetSearchVectorQuery($text: String, $image: String) {\n    create_search_vector(text: $text, image: $image)\n  }\n": types.GetSearchVectorQueryDocument,
    "\n  mutation AddFavoriteMutation($object: item_favorites_insert_input!) {\n    insert_item_favorites_one(object: $object) {\n      id\n      beer {\n        id\n      }\n      wine {\n        id\n      }\n      spirit {\n        id\n      }\n      coffee {\n        id\n      }\n    }\n  }\n": types.AddFavoriteMutationDocument,
    "\n  mutation DeleteFavoriteMutation($id: uuid!) {\n    delete_item_favorites_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteFavoriteMutationDocument,
    "\n  query GetBeerPageQuery($itemId: uuid!, $userId: uuid!) {\n    beers_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      style\n      vintage\n      description\n      alcohol_content_percentage\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n": types.GetBeerPageQueryDocument,
    "\n  query EditBeerPageQuery($itemId: uuid!) {\n    beers_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      vintage\n      style\n      description\n      alcohol_content_percentage\n      barcode_code\n      international_bitterness_unit\n      country\n    }\n  }\n": types.EditBeerPageQueryDocument,
    "\n  query GetCellarBeer($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      beer {\n        id\n        name\n        created_by_id\n        vintage\n        style\n        description\n        alcohol_content_percentage\n        country\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.GetCellarBeerDocument,
    "\n  query EditCoffeePageQuery($itemId: uuid!) {\n    coffees_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      description\n      barcode_code\n      country\n    }\n  }\n": types.EditCoffeePageQueryDocument,
    "\n  query GetCellarCoffee($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      coffee {\n        id\n        name\n        created_by_id\n        description\n        country\n        process\n        roast_level\n        species\n        cultivar\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.GetCellarCoffeeDocument,
    "\n  query EditCellarQuery($id: uuid!, $userId: uuid!) {\n    cellars_by_pk(id: $id) {\n      id\n      name\n      privacy\n      created_by_id\n      co_owners {\n        user_id\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.EditCellarQueryDocument,
    "\n  query GetCellar($cellarId: uuid!) {\n    cellars_by_pk(id: $cellarId) {\n      id\n      name\n      created_by_id\n      co_owners {\n        user_id\n      }\n    }\n  }\n": types.GetCellarDocument,
    "\n  query GetCellarItemsQuery(\n    $cellarId: uuid!\n    $itemsWhereClause: cellar_items_bool_exp\n    $search: vector\n    $userId: uuid!\n  ) {\n    cellars_by_pk(id: $cellarId) {\n      id\n      name\n      created_by_id\n      co_owners {\n        user_id\n      }\n      item_counts: items_aggregate(where: { empty_at: { _is_null: true } }) {\n        beers: aggregate {\n          count(columns: [beer_id])\n        }\n        wines: aggregate {\n          count(columns: [wine_id])\n        }\n        spirits: aggregate {\n          count(columns: [spirit_id])\n        }\n        coffees: aggregate {\n          count(columns: [coffee_id])\n        }\n      }\n      items(where: $itemsWhereClause) {\n        id\n        type\n        display_image {\n          file_id\n          placeholder\n        }\n        spirit {\n          id\n          name\n          vintage\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        wine {\n          id\n          name\n          vintage\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        beer {\n          id\n          name\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        coffee {\n          id\n          name\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment reviewFragment on item_reviews_aggregate {\n    aggregate {\n      count\n      avg {\n        score\n      }\n    }\n  }\n": types.GetCellarItemsQueryDocument,
    "\n  query EditSpiritPageQuery($itemId: uuid!) {\n    spirits_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      vintage\n      type\n      style\n      description\n      alcohol_content_percentage\n      barcode_code\n      country\n    }\n  }\n": types.EditSpiritPageQueryDocument,
    "\n  query GetSpirit($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      spirit {\n        id\n        name\n        created_by_id\n        vintage\n        type\n        description\n        alcohol_content_percentage\n        style\n        country\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.GetSpiritDocument,
    "\n  query EditWinePageQuery($itemId: uuid!) {\n    wines_by_pk(id: $itemId) {\n      id\n      name\n      description\n      created_by_id\n      vintage\n      description\n      alcohol_content_percentage\n      barcode_code\n      special_designation\n      vineyard_designation\n      variety\n      region\n      style\n      country\n    }\n  }\n": types.EditWinePageQueryDocument,
    "\n  query GetCellarWine($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      wine {\n        id\n        name\n        created_by_id\n        region\n        variety\n        vintage\n        style\n        country\n        description\n        barcode_code\n        alcohol_content_percentage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.GetCellarWineDocument,
    "\n  query AddCellarQuery($userId: uuid!) {\n    user(id: $userId) {\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.AddCellarQueryDocument,
    "\n  query GetCellars {\n    cellars {\n      id\n      name\n      createdBy {\n        id\n        displayName\n        avatarUrl\n      }\n      coOwners: co_owners {\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.GetCellarsDocument,
    "\n  query GetCoffeePageQuery($itemId: uuid!, $userId: uuid!) {\n    coffees_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      description\n      country\n      process\n      roast_level\n      species\n      cultivar\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n": types.GetCoffeePageQueryDocument,
    "\n  query FriendsQuery($userId: uuid!) {\n    user(id: $userId) {\n      friends {\n        friend_id\n      }\n    }\n  }\n": types.FriendsQueryDocument,
    "\n  query FavoritesQuery($id: uuid!, $where: item_favorites_bool_exp) {\n    user(id: $id) {\n      item_favorites(where: $where) {\n        beer {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        wine {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        spirit {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        coffee {\n          id\n          name\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment imageFragment on item_image {\n    file_id\n    placeholder\n  }\n  fragment avgScore on item_reviews_aggregate {\n    aggregate {\n      count\n      avg {\n        score\n      }\n    }\n  }\n": types.FavoritesQueryDocument,
    "\n  query SearchUsers($search: String, $userId: uuid!) {\n    users(\n      where: {\n        _and: [\n          { displayName: { _ilike: $search }, id: { _neq: $userId } }\n          { _not: { incomingFriendRequests: { user_id: { _eq: $userId } } } }\n          { _not: { outgoingFriendRequests: { friend_id: { _eq: $userId } } } }\n          { _not: { friends: { friend_id: { _eq: $userId } } } }\n        ]\n      }\n      limit: 10\n    ) {\n      id\n      displayName\n      avatarUrl\n      friends {\n        friend {\n          id\n        }\n      }\n    }\n  }\n": types.SearchUsersDocument,
    "\n  mutation InsertFriendRequest($request: friend_requests_insert_input!) {\n    insert_friend_requests_one(object: $request) {\n      id\n    }\n  }\n": types.InsertFriendRequestDocument,
    "\n  mutation AcceptFriendRequest($id: uuid!) {\n    update_friend_requests_by_pk(\n      pk_columns: { id: $id }\n      _set: { status: ACCEPTED }\n    ) {\n      id\n    }\n  }\n": types.AcceptFriendRequestDocument,
    "\n  mutation DeleteFriendRequest($id: uuid!) {\n    delete_friend_requests_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteFriendRequestDocument,
    "\n  subscription GetFriendRequests($id: uuid!) {\n    user(id: $id) {\n      id\n      outgoingFriendRequests {\n        id\n        status\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n      incomingFriendRequests {\n        id\n        status\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.GetFriendRequestsDocument,
    "\n  mutation RemoveFriend($userId: uuid!, $friendId: uuid!) {\n    mine: delete_friends_by_pk(user_id: $userId, friend_id: $friendId) {\n      user_id\n      friend_id\n    }\n    theirs: delete_friends_by_pk(user_id: $friendId, friend_id: $userId) {\n      user_id\n      friend_id\n    }\n  }\n": types.RemoveFriendDocument,
    "\n  query RankingQuery(\n    $userId: uuid!\n    $reviewers: String!\n    $where: item_score_bool_exp_bool_exp\n  ) {\n    item_scores(\n      args: { reviewers: $reviewers }\n      order_by: { score: desc, count: desc }\n      where: $where\n      limit: 200\n    ) {\n      score\n      count\n      beer {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      spirit {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      coffee {\n        id\n        name\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment imageFragment on item_image {\n    file_id\n    placeholder\n  }\n": types.RankingQueryDocument,
    "\n  query GetSpiritPageQuery($itemId: uuid!, $userId: uuid!) {\n    spirits_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      style\n      vintage\n      description\n      alcohol_content_percentage\n      type\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n": types.GetSpiritPageQueryDocument,
    "\n  query GetUser($userId: uuid!) {\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n    }\n  }\n": types.GetUserDocument,
    "\n  mutation UpdateUser($userId: uuid!, $displayName: String!) {\n    updateUser(\n      pk_columns: { id: $userId }\n      _set: { displayName: $displayName }\n    ) {\n      id\n    }\n  }\n": types.UpdateUserDocument,
    "\n  query GetWinePageQuery($itemId: uuid!, $userId: uuid!) {\n    wines_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      region\n      variety\n      style\n      vintage\n      description\n      barcode_code\n      alcohol_content_percentage\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n": types.GetWinePageQueryDocument,
    "\n  query GetBeerDefaults($hint: item_defaults_hint!) {\n    beer_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      vintage\n      style\n      international_bitterness_unit\n    }\n  }\n": types.GetBeerDefaultsDocument,
    "\n  mutation AddCellar($cellar: cellars_insert_input!) {\n    insert_cellars_one(object: $cellar) {\n      id\n    }\n  }\n": types.AddCellarDocument,
    "\n  mutation EditCellar(\n    $id: uuid!\n    $cellar: cellars_set_input!\n    $co_owners: [cellar_owners_insert_input!]!\n  ) {\n    update_cellars_by_pk(pk_columns: { id: $id }, _set: $cellar) {\n      id\n    }\n    delete_cellar_owners(where: { cellar_id: { _eq: $id } }) {\n      affected_rows\n    }\n    insert_cellar_owners(objects: $co_owners) {\n      affected_rows\n    }\n  }\n": types.EditCellarDocument,
    "\n  query GetCoffeeDefaults($hint: item_defaults_hint!) {\n    coffee_defaults(hint: $hint) {\n      name\n      description\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      roast_level\n      cultivar\n      process\n      species\n    }\n  }\n": types.GetCoffeeDefaultsDocument,
    "\n  query SearchByBarcode($code: String!) {\n    barcodes_by_pk(code: $code) {\n      wines {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      beers {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirits {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffees {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n": types.SearchByBarcodeDocument,
    "\n  query GetImageVector($image: String!) {\n    create_search_vector(image: $image)\n  }\n": types.GetImageVectorDocument,
    "\n  query ImageSearchQuery($image: String!) {\n    image_search(\n      args: { image: $image }\n      where: { distance: { _lte: 0.3 } }\n      order_by: { distance: asc }\n      limit: 10\n    ) {\n      distance\n      beer {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirit {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffee {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ImageSearchQueryDocument,
    "\n  mutation DeleteCellarItem($itemId: uuid!) {\n    delete_cellar_items_by_pk(id: $itemId) {\n      id\n    }\n  }\n": types.DeleteCellarItemDocument,
    "\n  query TextSearchQuery($text: String!) {\n    text_search(\n      args: { text: $text }\n      where: { distance: { _lte: 0.32 } }\n      order_by: { distance: asc }\n      limit: 10\n    ) {\n      distance\n      beer {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirit {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffee {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n": types.TextSearchQueryDocument,
    "\n  query GetSpiritDefaults($hint: item_defaults_hint!) {\n    spirit_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      vintage\n      style\n      type\n    }\n  }\n": types.GetSpiritDefaultsDocument,
    "\n  query GetWineDefaults($hint: item_defaults_hint!) {\n    wine_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      region\n      country\n      special_designation\n      variety\n      vineyard_designation\n      vintage\n      style\n    }\n  }\n": types.GetWineDefaultsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCredential($id: String!) {\n    admin_credentials_by_pk(id: $id) {\n      id\n      credentials\n    }\n  }\n"): (typeof documents)["\n  query GetCredential($id: String!) {\n    admin_credentials_by_pk(id: $id) {\n      id\n      credentials\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFile($id: uuid!) {\n    file(id: $id) {\n      id\n      bucket {\n        id\n      }\n      mimeType\n      size\n    }\n  }\n"): (typeof documents)["\n  query GetFile($id: uuid!) {\n    file(id: $id) {\n      id\n      bucket {\n        id\n      }\n      mimeType\n      size\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddTextExtractionResults($analysis: image_analysis_insert_input!) {\n    insert_image_analysis_one(object: $analysis) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddTextExtractionResults($analysis: image_analysis_insert_input!) {\n    insert_image_analysis_one(object: $analysis) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertFriends(\n    $friends: [friends_insert_input!]!\n    $requestId: uuid!\n  ) {\n    insert_friends(objects: $friends) {\n      affected_rows\n    }\n\n    delete_friend_requests_by_pk(id: $requestId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertFriends(\n    $friends: [friends_insert_input!]!\n    $requestId: uuid!\n  ) {\n    insert_friends(objects: $friends) {\n      affected_rows\n    }\n\n    delete_friend_requests_by_pk(id: $requestId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertVector($vector: item_vectors_insert_input!) {\n    insert_item_vectors_one(object: $vector) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertVector($vector: item_vectors_insert_input!) {\n    insert_item_vectors_one(object: $vector) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteVectors($where: item_vectors_bool_exp!) {\n    delete_item_vectors(where: $where) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteVectors($where: item_vectors_bool_exp!) {\n    delete_item_vectors(where: $where) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateItemImage($itemId: uuid!, $item: item_image_set_input!) {\n    update_item_image_by_pk(pk_columns: { id: $itemId }, _set: $item) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateItemImage($itemId: uuid!, $item: item_image_set_input!) {\n    update_item_image_by_pk(pk_columns: { id: $itemId }, _set: $item) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddItemOnboarding($onboarding: item_onboardings_insert_input!) {\n    insert_item_onboardings_one(object: $onboarding) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddItemOnboarding($onboarding: item_onboardings_insert_input!) {\n    insert_item_onboardings_one(object: $onboarding) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertItemImage($item: item_image_insert_input!) {\n    insert_item_image_one(object: $item) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertItemImage($item: item_image_insert_input!) {\n    insert_item_image_one(object: $item) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddItemImage($input: item_image_upload_input!) {\n    item_image_upload(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddItemImage($input: item_image_upload_input!) {\n    item_image_upload(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCellarItem($item: cellar_items_insert_input!) {\n    insert_cellar_items_one(object: $item) {\n      id\n      cellar_id\n    }\n  }\n"): (typeof documents)["\n  mutation AddCellarItem($item: cellar_items_insert_input!) {\n    insert_cellar_items_one(object: $item) {\n      id\n      cellar_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddBeer($beer: beers_insert_input!) {\n    insert_beers_one(object: $beer) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddBeer($beer: beers_insert_input!) {\n    insert_beers_one(object: $beer) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBeer($beerId: uuid!, $beer: beers_set_input!) {\n    update_beers_by_pk(pk_columns: { id: $beerId }, _set: $beer) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBeer($beerId: uuid!, $beer: beers_set_input!) {\n    update_beers_by_pk(pk_columns: { id: $beerId }, _set: $beer) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCoffee($coffee: coffees_insert_input!) {\n    insert_coffees_one(object: $coffee) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddCoffee($coffee: coffees_insert_input!) {\n    insert_coffees_one(object: $coffee) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCoffee($coffeeId: uuid!, $coffee: coffees_set_input!) {\n    update_coffees_by_pk(pk_columns: { id: $coffeeId }, _set: $coffee) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCoffee($coffeeId: uuid!, $coffee: coffees_set_input!) {\n    update_coffees_by_pk(pk_columns: { id: $coffeeId }, _set: $coffee) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCellarItem($id: uuid!, $item: cellar_items_set_input!) {\n    update_cellar_items_by_pk(pk_columns: { id: $id }, _set: $item) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCellarItem($id: uuid!, $item: cellar_items_set_input!) {\n    update_cellar_items_by_pk(pk_columns: { id: $id }, _set: $item) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddWine($wine: wines_insert_input!) {\n    insert_wines_one(object: $wine) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddWine($wine: wines_insert_input!) {\n    insert_wines_one(object: $wine) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWine($wineId: uuid!, $wine: wines_set_input!) {\n    update_wines_by_pk(pk_columns: { id: $wineId }, _set: $wine) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWine($wineId: uuid!, $wine: wines_set_input!) {\n    update_wines_by_pk(pk_columns: { id: $wineId }, _set: $wine) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddSpirit($spirit: spirits_insert_input!) {\n    insert_spirits_one(object: $spirit) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddSpirit($spirit: spirits_insert_input!) {\n    insert_spirits_one(object: $spirit) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSpirit($spiritId: uuid!, $spirit: spirits_set_input!) {\n    update_spirits_by_pk(pk_columns: { id: $spiritId }, _set: $spirit) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSpirit($spiritId: uuid!, $spirit: spirits_set_input!) {\n    update_spirits_by_pk(pk_columns: { id: $spiritId }, _set: $spirit) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddItemReview($review: item_reviews_insert_input!) {\n    insert_item_reviews_one(object: $review) {\n      id\n      beer {\n        id\n      }\n      wine {\n        id\n      }\n      spirit {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddItemReview($review: item_reviews_insert_input!) {\n    insert_item_reviews_one(object: $review) {\n      id\n      beer {\n        id\n      }\n      wine {\n        id\n      }\n      spirit {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCheckIn($checkIn: check_ins_insert_input!) {\n    insert_check_ins_one(object: $checkIn) {\n      id\n      cellar_item {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddCheckIn($checkIn: check_ins_insert_input!) {\n    insert_check_ins_one(object: $checkIn) {\n      id\n      cellar_item {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCheckIns($checkIns: [check_ins_insert_input!]!) {\n    insert_check_ins(objects: $checkIns) {\n      affected_rows\n      returning {\n        id\n        cellar_item {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddCheckIns($checkIns: [check_ins_insert_input!]!) {\n    insert_check_ins(objects: $checkIns) {\n      affected_rows\n      returning {\n        id\n        cellar_item {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSearchVectorQuery($text: String, $image: String) {\n    create_search_vector(text: $text, image: $image)\n  }\n"): (typeof documents)["\n  query GetSearchVectorQuery($text: String, $image: String) {\n    create_search_vector(text: $text, image: $image)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddFavoriteMutation($object: item_favorites_insert_input!) {\n    insert_item_favorites_one(object: $object) {\n      id\n      beer {\n        id\n      }\n      wine {\n        id\n      }\n      spirit {\n        id\n      }\n      coffee {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddFavoriteMutation($object: item_favorites_insert_input!) {\n    insert_item_favorites_one(object: $object) {\n      id\n      beer {\n        id\n      }\n      wine {\n        id\n      }\n      spirit {\n        id\n      }\n      coffee {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteFavoriteMutation($id: uuid!) {\n    delete_item_favorites_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteFavoriteMutation($id: uuid!) {\n    delete_item_favorites_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBeerPageQuery($itemId: uuid!, $userId: uuid!) {\n    beers_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      style\n      vintage\n      description\n      alcohol_content_percentage\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetBeerPageQuery($itemId: uuid!, $userId: uuid!) {\n    beers_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      style\n      vintage\n      description\n      alcohol_content_percentage\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EditBeerPageQuery($itemId: uuid!) {\n    beers_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      vintage\n      style\n      description\n      alcohol_content_percentage\n      barcode_code\n      international_bitterness_unit\n      country\n    }\n  }\n"): (typeof documents)["\n  query EditBeerPageQuery($itemId: uuid!) {\n    beers_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      vintage\n      style\n      description\n      alcohol_content_percentage\n      barcode_code\n      international_bitterness_unit\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCellarBeer($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      beer {\n        id\n        name\n        created_by_id\n        vintage\n        style\n        description\n        alcohol_content_percentage\n        country\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCellarBeer($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      beer {\n        id\n        name\n        created_by_id\n        vintage\n        style\n        description\n        alcohol_content_percentage\n        country\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EditCoffeePageQuery($itemId: uuid!) {\n    coffees_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      description\n      barcode_code\n      country\n    }\n  }\n"): (typeof documents)["\n  query EditCoffeePageQuery($itemId: uuid!) {\n    coffees_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      description\n      barcode_code\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCellarCoffee($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      coffee {\n        id\n        name\n        created_by_id\n        description\n        country\n        process\n        roast_level\n        species\n        cultivar\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCellarCoffee($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      coffee {\n        id\n        name\n        created_by_id\n        description\n        country\n        process\n        roast_level\n        species\n        cultivar\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EditCellarQuery($id: uuid!, $userId: uuid!) {\n    cellars_by_pk(id: $id) {\n      id\n      name\n      privacy\n      created_by_id\n      co_owners {\n        user_id\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EditCellarQuery($id: uuid!, $userId: uuid!) {\n    cellars_by_pk(id: $id) {\n      id\n      name\n      privacy\n      created_by_id\n      co_owners {\n        user_id\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCellar($cellarId: uuid!) {\n    cellars_by_pk(id: $cellarId) {\n      id\n      name\n      created_by_id\n      co_owners {\n        user_id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCellar($cellarId: uuid!) {\n    cellars_by_pk(id: $cellarId) {\n      id\n      name\n      created_by_id\n      co_owners {\n        user_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCellarItemsQuery(\n    $cellarId: uuid!\n    $itemsWhereClause: cellar_items_bool_exp\n    $search: vector\n    $userId: uuid!\n  ) {\n    cellars_by_pk(id: $cellarId) {\n      id\n      name\n      created_by_id\n      co_owners {\n        user_id\n      }\n      item_counts: items_aggregate(where: { empty_at: { _is_null: true } }) {\n        beers: aggregate {\n          count(columns: [beer_id])\n        }\n        wines: aggregate {\n          count(columns: [wine_id])\n        }\n        spirits: aggregate {\n          count(columns: [spirit_id])\n        }\n        coffees: aggregate {\n          count(columns: [coffee_id])\n        }\n      }\n      items(where: $itemsWhereClause) {\n        id\n        type\n        display_image {\n          file_id\n          placeholder\n        }\n        spirit {\n          id\n          name\n          vintage\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        wine {\n          id\n          name\n          vintage\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        beer {\n          id\n          name\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        coffee {\n          id\n          name\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment reviewFragment on item_reviews_aggregate {\n    aggregate {\n      count\n      avg {\n        score\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCellarItemsQuery(\n    $cellarId: uuid!\n    $itemsWhereClause: cellar_items_bool_exp\n    $search: vector\n    $userId: uuid!\n  ) {\n    cellars_by_pk(id: $cellarId) {\n      id\n      name\n      created_by_id\n      co_owners {\n        user_id\n      }\n      item_counts: items_aggregate(where: { empty_at: { _is_null: true } }) {\n        beers: aggregate {\n          count(columns: [beer_id])\n        }\n        wines: aggregate {\n          count(columns: [wine_id])\n        }\n        spirits: aggregate {\n          count(columns: [spirit_id])\n        }\n        coffees: aggregate {\n          count(columns: [coffee_id])\n        }\n      }\n      items(where: $itemsWhereClause) {\n        id\n        type\n        display_image {\n          file_id\n          placeholder\n        }\n        spirit {\n          id\n          name\n          vintage\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        wine {\n          id\n          name\n          vintage\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        beer {\n          id\n          name\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n        coffee {\n          id\n          name\n          item_vectors {\n            distance(args: { search: $search })\n          }\n          item_favorites(where: { user_id: { _eq: $userId } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $userId } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          reviews_aggregate {\n            ...reviewFragment\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment reviewFragment on item_reviews_aggregate {\n    aggregate {\n      count\n      avg {\n        score\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EditSpiritPageQuery($itemId: uuid!) {\n    spirits_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      vintage\n      type\n      style\n      description\n      alcohol_content_percentage\n      barcode_code\n      country\n    }\n  }\n"): (typeof documents)["\n  query EditSpiritPageQuery($itemId: uuid!) {\n    spirits_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      vintage\n      type\n      style\n      description\n      alcohol_content_percentage\n      barcode_code\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpirit($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      spirit {\n        id\n        name\n        created_by_id\n        vintage\n        type\n        description\n        alcohol_content_percentage\n        style\n        country\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSpirit($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      spirit {\n        id\n        name\n        created_by_id\n        vintage\n        type\n        description\n        alcohol_content_percentage\n        style\n        country\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EditWinePageQuery($itemId: uuid!) {\n    wines_by_pk(id: $itemId) {\n      id\n      name\n      description\n      created_by_id\n      vintage\n      description\n      alcohol_content_percentage\n      barcode_code\n      special_designation\n      vineyard_designation\n      variety\n      region\n      style\n      country\n    }\n  }\n"): (typeof documents)["\n  query EditWinePageQuery($itemId: uuid!) {\n    wines_by_pk(id: $itemId) {\n      id\n      name\n      description\n      created_by_id\n      vintage\n      description\n      alcohol_content_percentage\n      barcode_code\n      special_designation\n      vineyard_designation\n      variety\n      region\n      style\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCellarWine($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      wine {\n        id\n        name\n        created_by_id\n        region\n        variety\n        vintage\n        style\n        country\n        description\n        barcode_code\n        alcohol_content_percentage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCellarWine($itemId: uuid!, $userId: uuid!) {\n    cellar_items_by_pk(id: $itemId) {\n      id\n      open_at\n      empty_at\n      percentage_remaining\n      wine {\n        id\n        name\n        created_by_id\n        region\n        variety\n        vintage\n        style\n        country\n        description\n        barcode_code\n        alcohol_content_percentage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        item_favorites_aggregate {\n          aggregate {\n            count\n          }\n        }\n        reviews(limit: 10, order_by: { created_at: desc }) {\n          id\n          user {\n            avatarUrl\n            displayName\n          }\n          score\n          text\n          createdAt: created_at\n        }\n      }\n      display_image {\n        file_id\n        placeholder\n      }\n      cellar {\n        name\n        created_by_id\n        co_owners {\n          user_id\n        }\n      }\n      check_ins(order_by: { created_at: desc }) {\n        id\n        createdAt: created_at\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n      friends(order_by: { friend: { displayName: desc } }) {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AddCellarQuery($userId: uuid!) {\n    user(id: $userId) {\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AddCellarQuery($userId: uuid!) {\n    user(id: $userId) {\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCellars {\n    cellars {\n      id\n      name\n      createdBy {\n        id\n        displayName\n        avatarUrl\n      }\n      coOwners: co_owners {\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCellars {\n    cellars {\n      id\n      name\n      createdBy {\n        id\n        displayName\n        avatarUrl\n      }\n      coOwners: co_owners {\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCoffeePageQuery($itemId: uuid!, $userId: uuid!) {\n    coffees_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      description\n      country\n      process\n      roast_level\n      species\n      cultivar\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetCoffeePageQuery($itemId: uuid!, $userId: uuid!) {\n    coffees_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      description\n      country\n      process\n      roast_level\n      species\n      cultivar\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FriendsQuery($userId: uuid!) {\n    user(id: $userId) {\n      friends {\n        friend_id\n      }\n    }\n  }\n"): (typeof documents)["\n  query FriendsQuery($userId: uuid!) {\n    user(id: $userId) {\n      friends {\n        friend_id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FavoritesQuery($id: uuid!, $where: item_favorites_bool_exp) {\n    user(id: $id) {\n      item_favorites(where: $where) {\n        beer {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        wine {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        spirit {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        coffee {\n          id\n          name\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment imageFragment on item_image {\n    file_id\n    placeholder\n  }\n  fragment avgScore on item_reviews_aggregate {\n    aggregate {\n      count\n      avg {\n        score\n      }\n    }\n  }\n"): (typeof documents)["\n  query FavoritesQuery($id: uuid!, $where: item_favorites_bool_exp) {\n    user(id: $id) {\n      item_favorites(where: $where) {\n        beer {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        wine {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        spirit {\n          id\n          name\n          vintage\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n        coffee {\n          id\n          name\n          reviews_aggregate {\n            ...avgScore\n          }\n          item_favorites(where: { user_id: { _eq: $id } }) {\n            id\n          }\n          user_reviews: reviews_aggregate(\n            where: { user_id: { _eq: $id } }\n            limit: 1\n          ) {\n            aggregate {\n              count\n            }\n          }\n          item_favorites_aggregate {\n            ...favoriteFragment\n          }\n          item_images(limit: 1) {\n            ...imageFragment\n          }\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment imageFragment on item_image {\n    file_id\n    placeholder\n  }\n  fragment avgScore on item_reviews_aggregate {\n    aggregate {\n      count\n      avg {\n        score\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchUsers($search: String, $userId: uuid!) {\n    users(\n      where: {\n        _and: [\n          { displayName: { _ilike: $search }, id: { _neq: $userId } }\n          { _not: { incomingFriendRequests: { user_id: { _eq: $userId } } } }\n          { _not: { outgoingFriendRequests: { friend_id: { _eq: $userId } } } }\n          { _not: { friends: { friend_id: { _eq: $userId } } } }\n        ]\n      }\n      limit: 10\n    ) {\n      id\n      displayName\n      avatarUrl\n      friends {\n        friend {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchUsers($search: String, $userId: uuid!) {\n    users(\n      where: {\n        _and: [\n          { displayName: { _ilike: $search }, id: { _neq: $userId } }\n          { _not: { incomingFriendRequests: { user_id: { _eq: $userId } } } }\n          { _not: { outgoingFriendRequests: { friend_id: { _eq: $userId } } } }\n          { _not: { friends: { friend_id: { _eq: $userId } } } }\n        ]\n      }\n      limit: 10\n    ) {\n      id\n      displayName\n      avatarUrl\n      friends {\n        friend {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertFriendRequest($request: friend_requests_insert_input!) {\n    insert_friend_requests_one(object: $request) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertFriendRequest($request: friend_requests_insert_input!) {\n    insert_friend_requests_one(object: $request) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AcceptFriendRequest($id: uuid!) {\n    update_friend_requests_by_pk(\n      pk_columns: { id: $id }\n      _set: { status: ACCEPTED }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AcceptFriendRequest($id: uuid!) {\n    update_friend_requests_by_pk(\n      pk_columns: { id: $id }\n      _set: { status: ACCEPTED }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteFriendRequest($id: uuid!) {\n    delete_friend_requests_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteFriendRequest($id: uuid!) {\n    delete_friend_requests_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription GetFriendRequests($id: uuid!) {\n    user(id: $id) {\n      id\n      outgoingFriendRequests {\n        id\n        status\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n      incomingFriendRequests {\n        id\n        status\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription GetFriendRequests($id: uuid!) {\n    user(id: $id) {\n      id\n      outgoingFriendRequests {\n        id\n        status\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n      incomingFriendRequests {\n        id\n        status\n        user {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n      friends {\n        friend {\n          id\n          displayName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFriend($userId: uuid!, $friendId: uuid!) {\n    mine: delete_friends_by_pk(user_id: $userId, friend_id: $friendId) {\n      user_id\n      friend_id\n    }\n    theirs: delete_friends_by_pk(user_id: $friendId, friend_id: $userId) {\n      user_id\n      friend_id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFriend($userId: uuid!, $friendId: uuid!) {\n    mine: delete_friends_by_pk(user_id: $userId, friend_id: $friendId) {\n      user_id\n      friend_id\n    }\n    theirs: delete_friends_by_pk(user_id: $friendId, friend_id: $userId) {\n      user_id\n      friend_id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RankingQuery(\n    $userId: uuid!\n    $reviewers: String!\n    $where: item_score_bool_exp_bool_exp\n  ) {\n    item_scores(\n      args: { reviewers: $reviewers }\n      order_by: { score: desc, count: desc }\n      where: $where\n      limit: 200\n    ) {\n      score\n      count\n      beer {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      spirit {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      coffee {\n        id\n        name\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment imageFragment on item_image {\n    file_id\n    placeholder\n  }\n"): (typeof documents)["\n  query RankingQuery(\n    $userId: uuid!\n    $reviewers: String!\n    $where: item_score_bool_exp_bool_exp\n  ) {\n    item_scores(\n      args: { reviewers: $reviewers }\n      order_by: { score: desc, count: desc }\n      where: $where\n      limit: 200\n    ) {\n      score\n      count\n      beer {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      spirit {\n        id\n        name\n        vintage\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n      coffee {\n        id\n        name\n        item_favorites(where: { user_id: { _eq: $userId } }) {\n          id\n        }\n        user_reviews: reviews_aggregate(\n          where: { user_id: { _eq: $userId } }\n          limit: 1\n        ) {\n          aggregate {\n            count\n          }\n        }\n        item_favorites_aggregate {\n          ...favoriteFragment\n        }\n        item_images(limit: 1) {\n          ...imageFragment\n        }\n      }\n    }\n  }\n  fragment favoriteFragment on item_favorites_aggregate {\n    aggregate {\n      count\n    }\n  }\n  fragment imageFragment on item_image {\n    file_id\n    placeholder\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpiritPageQuery($itemId: uuid!, $userId: uuid!) {\n    spirits_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      style\n      vintage\n      description\n      alcohol_content_percentage\n      type\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetSpiritPageQuery($itemId: uuid!, $userId: uuid!) {\n    spirits_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      style\n      vintage\n      description\n      alcohol_content_percentage\n      type\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUser($userId: uuid!) {\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query GetUser($userId: uuid!) {\n    user(id: $userId) {\n      id\n      displayName\n      avatarUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($userId: uuid!, $displayName: String!) {\n    updateUser(\n      pk_columns: { id: $userId }\n      _set: { displayName: $displayName }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($userId: uuid!, $displayName: String!) {\n    updateUser(\n      pk_columns: { id: $userId }\n      _set: { displayName: $displayName }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWinePageQuery($itemId: uuid!, $userId: uuid!) {\n    wines_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      region\n      variety\n      style\n      vintage\n      description\n      barcode_code\n      alcohol_content_percentage\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetWinePageQuery($itemId: uuid!, $userId: uuid!) {\n    wines_by_pk(id: $itemId) {\n      id\n      name\n      created_by_id\n      region\n      variety\n      style\n      vintage\n      description\n      barcode_code\n      alcohol_content_percentage\n      country\n      item_favorites(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n      item_favorites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      reviews(limit: 10, order_by: { created_at: desc }) {\n        id\n        user {\n          avatarUrl\n          displayName\n        }\n        score\n        text\n        createdAt: created_at\n      }\n      item_images(limit: 1) {\n        file_id\n        placeholder\n      }\n      cellar_items(\n        where: { empty_at: { _is_null: true } }\n        distinct_on: cellar_id\n      ) {\n        cellar {\n          id\n          name\n          createdBy {\n            id\n            displayName\n            avatarUrl\n          }\n          co_owners {\n            user {\n              id\n              displayName\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n    cellars(where: { created_by_id: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBeerDefaults($hint: item_defaults_hint!) {\n    beer_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      vintage\n      style\n      international_bitterness_unit\n    }\n  }\n"): (typeof documents)["\n  query GetBeerDefaults($hint: item_defaults_hint!) {\n    beer_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      vintage\n      style\n      international_bitterness_unit\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCellar($cellar: cellars_insert_input!) {\n    insert_cellars_one(object: $cellar) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddCellar($cellar: cellars_insert_input!) {\n    insert_cellars_one(object: $cellar) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditCellar(\n    $id: uuid!\n    $cellar: cellars_set_input!\n    $co_owners: [cellar_owners_insert_input!]!\n  ) {\n    update_cellars_by_pk(pk_columns: { id: $id }, _set: $cellar) {\n      id\n    }\n    delete_cellar_owners(where: { cellar_id: { _eq: $id } }) {\n      affected_rows\n    }\n    insert_cellar_owners(objects: $co_owners) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation EditCellar(\n    $id: uuid!\n    $cellar: cellars_set_input!\n    $co_owners: [cellar_owners_insert_input!]!\n  ) {\n    update_cellars_by_pk(pk_columns: { id: $id }, _set: $cellar) {\n      id\n    }\n    delete_cellar_owners(where: { cellar_id: { _eq: $id } }) {\n      affected_rows\n    }\n    insert_cellar_owners(objects: $co_owners) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCoffeeDefaults($hint: item_defaults_hint!) {\n    coffee_defaults(hint: $hint) {\n      name\n      description\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      roast_level\n      cultivar\n      process\n      species\n    }\n  }\n"): (typeof documents)["\n  query GetCoffeeDefaults($hint: item_defaults_hint!) {\n    coffee_defaults(hint: $hint) {\n      name\n      description\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      roast_level\n      cultivar\n      process\n      species\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchByBarcode($code: String!) {\n    barcodes_by_pk(code: $code) {\n      wines {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      beers {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirits {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffees {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchByBarcode($code: String!) {\n    barcodes_by_pk(code: $code) {\n      wines {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      beers {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirits {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffees {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetImageVector($image: String!) {\n    create_search_vector(image: $image)\n  }\n"): (typeof documents)["\n  query GetImageVector($image: String!) {\n    create_search_vector(image: $image)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ImageSearchQuery($image: String!) {\n    image_search(\n      args: { image: $image }\n      where: { distance: { _lte: 0.3 } }\n      order_by: { distance: asc }\n      limit: 10\n    ) {\n      distance\n      beer {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirit {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffee {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ImageSearchQuery($image: String!) {\n    image_search(\n      args: { image: $image }\n      where: { distance: { _lte: 0.3 } }\n      order_by: { distance: asc }\n      limit: 10\n    ) {\n      distance\n      beer {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirit {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffee {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCellarItem($itemId: uuid!) {\n    delete_cellar_items_by_pk(id: $itemId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCellarItem($itemId: uuid!) {\n    delete_cellar_items_by_pk(id: $itemId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TextSearchQuery($text: String!) {\n    text_search(\n      args: { text: $text }\n      where: { distance: { _lte: 0.32 } }\n      order_by: { distance: asc }\n      limit: 10\n    ) {\n      distance\n      beer {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirit {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffee {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TextSearchQuery($text: String!) {\n    text_search(\n      args: { text: $text }\n      where: { distance: { _lte: 0.32 } }\n      order_by: { distance: asc }\n      limit: 10\n    ) {\n      distance\n      beer {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      wine {\n        id\n        name\n        vintage\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      spirit {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n      coffee {\n        id\n        name\n        item_images(limit: 1) {\n          file_id\n          placeholder\n        }\n        reviews_aggregate {\n          aggregate {\n            count\n            avg {\n              score\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpiritDefaults($hint: item_defaults_hint!) {\n    spirit_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      vintage\n      style\n      type\n    }\n  }\n"): (typeof documents)["\n  query GetSpiritDefaults($hint: item_defaults_hint!) {\n    spirit_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      country\n      vintage\n      style\n      type\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWineDefaults($hint: item_defaults_hint!) {\n    wine_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      region\n      country\n      special_designation\n      variety\n      vineyard_designation\n      vintage\n      style\n    }\n  }\n"): (typeof documents)["\n  query GetWineDefaults($hint: item_defaults_hint!) {\n    wine_defaults(hint: $hint) {\n      name\n      description\n      alcohol_content_percentage\n      barcode_code\n      barcode_type\n      item_onboarding_id\n      region\n      country\n      special_designation\n      variety\n      vineyard_designation\n      vintage\n      style\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;